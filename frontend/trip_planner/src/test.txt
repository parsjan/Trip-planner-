<section class="text-gray-600 body-font">
  <div class="container px-5 py-24 mx-auto flex flex-wrap">
    <div class="flex flex-wrap -m-4">
      <div class="p-4 lg:w-1/2 md:w-full">
        <div class="flex border-2 rounded-lg border-gray-200 border-opacity-50 p-8 sm:flex-row flex-col">
          <div class="w-16 h-16 sm:mr-8 sm:mb-0 mb-4 inline-flex items-center justify-center rounded-full bg-indigo-100 text-indigo-500 flex-shrink-0">
            <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-8 h-8" viewBox="0 0 24 24">
              <path d="M22 12h-4l-3 9L9 3l-3 9H2"></path>
            </svg>
          </div>
          <div class="flex-grow">
            <h2 class="text-gray-900 text-lg title-font font-medium mb-3">Shooting Stars</h2>
            <p class="leading-relaxed text-base">Blue bottle crucifix vinyl post-ironic four dollar toast vegan taxidermy. Gastropub indxgo juice poutine.</p>
            <a class="mt-3 text-indigo-500 inline-flex items-center">Learn More
              <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-4 h-4 ml-2" viewBox="0 0 24 24">
                <path d="M5 12h14M12 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
      <div class="p-4 lg:w-1/2 md:w-full">
        <div class="flex border-2 rounded-lg border-gray-200 border-opacity-50 p-8 sm:flex-row flex-col">
          <div class="w-16 h-16 sm:mr-8 sm:mb-0 mb-4 inline-flex items-center justify-center rounded-full bg-indigo-100 text-indigo-500 flex-shrink-0">
            <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-10 h-10" viewBox="0 0 24 24">
              <path d="M20 21v-2a4 4 0 00-4-4H8a4 4 0 00-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>
          </div>
          <div class="flex-grow">
            <h2 class="text-gray-900 text-lg title-font font-medium mb-3">The Catalyzer</h2>
            <p class="leading-relaxed text-base">Blue bottle crucifix vinyl post-ironic four dollar toast vegan taxidermy. Gastropub indxgo juice poutine.</p>
            <a class="mt-3 text-indigo-500 inline-flex items-center">Learn More
              <svg fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" class="w-4 h-4 ml-2" viewBox="0 0 24 24">
                <path d="M5 12h14M12 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
























<div class="p-4 md:w-1/4 sm:w-1/2 w-full">
        <div class="border-2 border-gray-200 flex items-center justify-center p-6 rounded-lg">
          <div class="flex items-center space-x-4">
            <button className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
              <FontAwesomeIcon icon={faPlane} size="2x" />
            </button>
            <button className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
              <FontAwesomeIcon icon={faBed} size="2x" />
            </button>
            <button className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
              <FontAwesomeIcon icon={faCar} size="2x" />
            </button>
            <button className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
              <FontAwesomeIcon icon={faPaperclip} size="2x" />
            </button>
          </div>
        </div>
      </div>
















      <div className="editor mx-auto w-10/12 flex flex-col text-gray-800 border border-grey-300 p-4 shadow-lg max-w-2xl">
        <input
          className="title bg-gray-100 border border-gray-300 p-2 mb-4 outline-none"
          spellCheck="false"
          placeholder="Title"
          type="text"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <textarea
          className="description bg-gray-100 sec p-3 h-60 border border-gray-300 outline-none"
          spellCheck="false"
          placeholder="Write or paste anything here: how to get around , tips and tricks "
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />

        <div className="icons flex text-gray-500 m-2">
          <label id="select-image">
            <label
              htmlFor="fileInput"
              className="mr-2 cursor-pointer hover:text-gray-700 border rounded-full p-1 h-7"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                className="h-6 w-6"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"
                />
              </svg>
            </label>
            <input
              id="fileInput"
              hidden
              type="file"
              multiple
              onChange={handleFileChange}
            />
          </label>
          <div className="count ml-auto text-gray-400 text-xs font-semibold">0/300</div>
        </div>

        <div id="preview" className="my-4 flex">
          {images.map((image, index) => (
            <div key={index} className="relative w-32 h-32 object-cover rounded">
              {image.preview ? (
                <img src={image.url} className="w-32 h-32 object-cover rounded" />
              ) : (
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24"
                  height="24"
                  viewBox="0 0 24 24"
                  className="fill-current w-32 h-32 ml-auto pt-1"
                >
                  <path
                    d="M15 2v5h5v15h-16v-20h11zm1-2h-14v24h20v-18l-6-6z"
                  />
                </svg>
              )}
              <button
                onClick={() => removeImage(index)}
                className="w-6 h-6 absolute text-center flex items-center top-0 right-0 m-2 text-white text-lg bg-red-500 hover:text-red-700 hover:bg-gray-100 rounded-full p-1"
              >
                <span className="mx-auto">×</span>
              </button>
              <div className="text-xs text-center p-2">{image.size}</div>
            </div>
          ))}
        </div>
        <div className="buttons flex justify-end">
          <div className="btn border border-purple-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-purple-500">Add</div>
     

              </div>
            </div>









             <div key={container.id} className="editor mx-auto w-10/12 flex flex-col text-gray-800 border border-grey-300 p-4 shadow-lg max-w-2xl">
          <input
            className="title bg-gray-100 border border-gray-300 p-2 mb-4 outline-none"
            spellCheck="false"
            placeholder="Title"
            type="text"
            value={container.title}
            onChange={(e) => handleTitleChange(container.id, e.target.value)}
          />
          <textarea
            className="description bg-gray-100 sec p-3 h-60 border border-gray-300 outline-none"
            spellCheck="false"
            placeholder="Write or paste anything here: how to get around, tips and tricks"
            value={container.description}
            onChange={(e) => handleDescriptionChange(container.id, e.target.value)}
          />
          <div className="icons flex text-gray-500 m-2">
            <label id="select-image">
              <label
                htmlFor="fileInput"
                className="mr-2 cursor-pointer hover:text-gray-700 border rounded-full p-1 h-7"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                  className="h-6 w-6"
                >
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13" />
                </svg>
              </label>
              <input id="fileInput" hidden type="file" multiple />
            </label>
            <div className="count ml-auto text-gray-400 text-xs font-semibold">0/300</div>
          </div>
          <div id="preview" className="my-4 flex">
            {/* Additional container content here */}
          </div>
          <div className="buttons flex justify-end">
            <div className="btn border border-purple-500 p-1 px-4 font-semibold cursor-pointer text-gray-200 ml-2 bg-purple-500">Add</div>
          </div>
        </div>
      ))}
    </div>
  );    




/////plus button 
  <button className="bg-purple-500 hover:bg-purple-600 text-white rounded-full p-4" onClick={addContainer}>
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                className="w-6 h-6"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" />
                  new list
              </svg>
            </button>
      
     


/////title field
      <input
                className="title bg-gray-100 border border-gray-300 p-2 mb-4 outline-none"
                spellCheck="false"
                placeholder="Title"
                type="text"
                value={container.title}
                onChange={(e) => handleTitleChange(container.id, e.target.value)}
              />












              import { useState } from 'react';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlane } from '@fortawesome/free-solid-svg-icons';
import { faBed } from '@fortawesome/free-solid-svg-icons';
import { faCar } from '@fortawesome/free-solid-svg-icons';
import { faPaperclip } from '@fortawesome/free-solid-svg-icons';

function Attachments() {
  const [fileInputKey, setFileInputKey] = useState(0);

  const handleFileInputChange = (index) => (e) => {
    e.preventDefault();
    // Trigger file input click event
    document.getElementById(`fileInput-${index}`).click();
  };

  const handleFileSelected = (e) => {
    const file = e.target.files[0];
    // Handle the selected file here (e.g., upload to server, store in state, etc.)
    console.log('Selected file:', file);
    // Increment key to reset the input element
    setFileInputKey((prevKey) => prevKey + 1);
  };

  return (
    <>
      <div class="p-2 w-full">
        <div class="border-2 border-purple-200 p-6 rounded-lg">
          <div class="flex items-center space-x-6">
            <h1 className="heading font-bold text-2xl m-5 text-gray-800 bg-white">
              Attachments
            </h1>
            {[faPlane, faBed, faCar, faPaperclip].map((icon, index) => (
              <div key={index}>
                <button
                  className="bg-purple-500 hover:bg-purple-600 text-white font-bold py-2 px-4 rounded-full focus:outline-none focus:shadow-outline"
                  onClick={handleFileInputChange(index)}
                >
                  <FontAwesomeIcon icon={icon} size="2x" />
                </button>
                <input
                  type="file"
                  id={`fileInput-${index}`}
                  key={`fileInput-${fileInputKey}`}
                  style={{ display: 'none' }}
                  onChange={handleFileSelected}
                />
              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  );
}

export default Attachments;












 const response = await axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=${MAX_WIDTH}&maxheight=${MAX_HEIGHT}&photo_reference=${photoReferencearr[i]}&key=${API_KEY}`, { responseType: 'arraybuffer' });
              console.log(response);


              let response1 = axios.get(`https://maps.googleapis.com/maps/api/place/photo?maxwidth=${MAX_WIDTH}&maxheight=${MAX_HEIGHT}&photo_reference=${photoReference}&key=${API_KEY}`, { responseType: 'arraybuffer' });
              let base64Image = Buffer.from(response.data, 'binary').toString('base64');
              let  imageDataURL = `data:image/jpeg;base64,${base64Image}`; 
              console.log(imageDataURL);






              onClick={deletetrip(tripobj)}
              onClick={previewtrip(tripobj)}



              navigate("/tripdashboard",{state:{saveddoc:tripobj}})








              <div className="border-2 border-purple-500 rounded-lg p-4 m-4 text-center">
      <h2 className="text-black font-bold text-2xl mb-4">Expense</h2>
      <input
        type="number"
        value={addexpense[expenseind]}
        onChange={(e) =>{
          const dummy=[...addexpense]
          dummy[expenseind]=e.target.value
          setaddexpense(dummy)
        }}
        className="border-2 border-purple-500 p-2 outline-none"
        placeholder="Enter Expense"
      />
    </div>


    {selectedPlaces.length > 0 && (
          <div className="w-full mb-4">
              {selectedPlaces.map((place, index) => (
                
                <div class="bg-gray-200 rounded-md p-4" key={index}>
                  <div class="flex justify-between items-start">
                    <div class="flex">
                <div class="rounded-full bg-purple-500 h-8 w-8 flex items-center justify-center text-white mr-4">
              <span class="text-lg font-semibold">{index+1}</span>
                </div>
                <h2 class="text-xl font-semibold text-gray-800">{place}</h2>
                </div>
                <div >
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                 <path strokeLinecap="round" strokeLinejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                 </svg>
                 </div>
                </div>
                <br/>
                <div class="flex">
                &nbsp; &nbsp;
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                 <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
                12pm-2pm
                &nbsp; &nbsp; &nbsp;
                <button onClick={()=>setopenexpense(true)} >
                 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z" />
                </svg>
                </button>
                500$ 
               
                </div>
              </div>
              ))}
          </div>
        )}




        setSelectedPlaces([...selectedPlaces, description]);

          <Searchbar key={index} date={date} tripid={tripid} username={username}/>   


          const Searchbar = (props) => {
    const space="  "
    const keyprop=props.key
    const date=props.date
    const [selectedPlaces, setSelectedPlaces] = useState([]);
    const [addexpense,setaddexpense]= useState([])
    const [openexpense,setopenexpense]=useState(false)
    const {
      ready,
      value,
      suggestions: { status, data },
      setValue,
      clearSuggestions,
    } = usePlacesAutocomplete();
   
    const ref = useOnclickOutside(() => {
      // When the user clicks outside of the component, we can dismiss
      // the searched suggestions by calling this method
      clearSuggestions();
    });
  
    const handleInput = (e) => {
      // Update the keyword of the input element
      setValue(e.target.value);
    };
  
    const handleSelect =
    ({ description }) =>
    () => {
      console.log("handleSelect invoked with description:", description);
      // When the user selects a place, we can replace the keyword without request data from API
      // by setting the second parameter to "false"
      setValue(description, false);
      clearSuggestions();

      // Get latitude and longitude via utility functions
      getGeocode({ address: description }).then((results) => {
        const { lat, lng } = getLatLng(results[0]);
       // console.log("📍 Coordinates: ", { lat, lng });
       // console.log(description)
      });
    };

  const renderSuggestions = () =>
    data.map((suggestion) => {
      const {
        place_id,
        structured_formatting: { main_text, secondary_text },
      } = suggestion;

      return (
        <li key={place_id} onClick={()=>handleSelect(suggestion)}>
          <strong>{main_text}</strong> <small>{secondary_text}</small>
        </li>
      );
    });
  
    return (
         <>
        <div className="editor mx-auto w-10/12 flex flex-col text-gray-800 border border-grey-300 p-4 shadow-lg max-w-2xl mt-4 mb-4">
        <span className="text-lg font-bold italic mb-2">{date}</span>
        <br/> <br/>
      <div ref={ref}>
      {selectedPlaces.length > 0 && (
          <div className="w-full mb-4">
              {selectedPlaces.map((place, index) => (
                
                <div class="bg-gray-200 rounded-md p-4" key={index}>
                  <div class="flex justify-between items-start">
                    <div class="flex">
                <div class="rounded-full bg-purple-500 h-8 w-8 flex items-center justify-center text-white mr-4">
              <span class="text-lg font-semibold">{index+1}</span>
                </div>
                <h2 class="text-xl font-semibold text-gray-800">{place}</h2>
                </div>
                <div >
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                 <path strokeLinecap="round" strokeLinejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0" />
                 </svg>
                 </div>
                </div>
                <br/>
                <div class="flex">
                &nbsp; &nbsp;
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                 <path strokeLinecap="round" strokeLinejoin="round" d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" />
                </svg>
                12pm-2pm
                &nbsp; &nbsp; &nbsp;
                <button onClick={()=>setopenexpense(true)} >
                 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
                <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 18.75a60.07 60.07 0 0 1 15.797 2.101c.727.198 1.453-.342 1.453-1.096V18.75M3.75 4.5v.75A.75.75 0 0 1 3 6h-.75m0 0v-.375c0-.621.504-1.125 1.125-1.125H20.25M2.25 6v9m18-10.5v.75c0 .414.336.75.75.75h.75m-1.5-1.5h.375c.621 0 1.125.504 1.125 1.125v9.75c0 .621-.504 1.125-1.125 1.125h-.375m1.5-1.5H21a.75.75 0 0 0-.75.75v.75m0 0H3.75m0 0h-.375a1.125 1.125 0 0 1-1.125-1.125V15m1.5 1.5v-.75A.75.75 0 0 0 3 15h-.75M15 10.5a3 3 0 1 1-6 0 3 3 0 0 1 6 0Zm3 0h.008v.008H18V10.5Zm-12 0h.008v.008H6V10.5Z" />
                </svg>
                </button>
                500$ 
               
                </div>
              </div>
              ))}
          </div>
        )}
      </div>
        
        <input
          className="title bg-gray-100 border border-gray-300 p-2 mb-4 outline-none"
          value={value}
          onChange={handleInput}
          disabled={!ready}
          placeholder="Where are you going?"
        />
        {/* We can use the "status" to decide whether we should display the dropdown or not */}
        {status === "OK" && <ul>{renderSuggestions()}</ul>}
        </div>
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
        <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 6.75h12M8.25 12h12m-12 5.25h12M3.75 6.75h.007v.008H3.75V6.75Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0ZM3.75 12h.007v.008H3.75V12Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Zm-.375 5.25h.007v.008H3.75v-.008Zm.375 0a.375.375 0 1 1-.75 0 .375.375 0 0 1 .75 0Z" />
        </svg>
     
    </>
    );
  };
export default Searchbar


<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
  <path stroke-linecap="round" stroke-linejoin="round" d="M16.5 6v.75m0 3v.75m0 3v.75m0 3V18m-9-5.25h5.25M7.5 15h3M3.375 5.25c-.621 0-1.125.504-1.125 1.125v3.026a2.999 2.999 0 0 1 0 5.198v3.026c0 .621.504 1.125 1.125 1.125h17.25c.621 0 1.125-.504 1.125-1.125v-3.026a2.999 2.999 0 0 1 0-5.198V6.375c0-.621-.504-1.125-1.125-1.125H3.375Z" />
</svg>

<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M4.26 10.147a60.438 60.438 0 0 0-.491 6.347A48.62 48.62 0 0 1 12 20.904a48.62 48.62 0 0 1 8.232-4.41 60.46 60.46 0 0 0-.491-6.347m-15.482 0a50.636 50.636 0 0 0-2.658-.813A59.906 59.906 0 0 1 12 3.493a59.903 59.903 0 0 1 10.399 5.84c-.896.248-1.783.52-2.658.814m-15.482 0A50.717 50.717 0 0 1 12 13.489a50.702 50.702 0 0 1 7.74-3.342M6.75 15a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5Zm0 0v-3.675A55.378 55.378 0 0 1 12 8.443m-7.007 11.55A5.981 5.981 0 0 0 6.75 15.75v-1.5" />
</svg>

<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M16.5 6v.75m0 3v.75m0 3v.75m0 3V18m-9-5.25h5.25M7.5 15h3M3.375 5.25c-.621 0-1.125.504-1.125 1.125v3.026a2.999 2.999 0 0 1 0 5.198v3.026c0 .621.504 1.125 1.125 1.125h17.25c.621 0 1.125-.504 1.125-1.125v-3.026a2.999 2.999 0 0 1 0-5.198V6.375c0-.621-.504-1.125-1.125-1.125H3.375Z" />
</svg>


<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
</svg>

<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-6 h-6">
  <path strokeLinecap="round" strokeLinejoin="round" d="M8.25 21v-4.875c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21m0 0h4.5V3.545M12.75 21h7.5V10.75M2.25 21h1.5m18 0h-18M2.25 9l4.5-1.636M18.75 3l-1.5.545m0 6.205 3 1m1.5.5-1.5-.5M6.75 7.364V3h-3v18m3-13.636 10.5-3.819" />
</svg>

 const ontimeclick=()=>{
    setcounttimeclick(counttimeclick + 1);
    console.log(counttimeclick);
    if(counttimeclick%2===0){
      setopentime(false)
    }
    else{
      setopentime(true)
    }





import React, { useState } from "react";
import Searchbar from "./seachbar.jsx"

 const Itinary =()>{
    const place=[delhi,chennai,banglore]
    const [chabi,setchabi]=useState()
    const handlesetchabi=(index)=>{
        if (index !== chabi) {
          setchabi(index);
        }
       }
       return(
        {place.map((place,index)=>(<div>
        <Searchbar chabi={chabi} setchabi={handlesetchabi(index)}/>
        </div>
        ))}
       )
 }


 const Searchbar = (props) => {
  const chabi=props.chabi
   const {setchabi}=props
   
   return(
{
  map.places(places,index)=>(
    <div onClick={()=>{
      setchabi()
    }}>
  )
}
   
   )
   }

   export default Searchbar



   void sam(___*abc){
    int x=10;
    int y=x+abc(10);
    cout<<y<<endl
   }
   int main(){
    sam(____);
    return 0;
   }